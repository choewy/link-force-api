name: Deploy

on:
  workflow_run:
    workflows: ['Tagging']
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node: [20]

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Download tag info
        uses: actions/download-artifact@v4
        with:
          name: tag
          path: tag_info.txt

      - name: Read tag info
        id: read-tag-info
        run: |
          TAG=$(cat tag_info.txt)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Set Environment Variables
        id: set-env
        run: |
          if [[ ${{ steps.read-tag-info.outputs.tag }} == *"-dev" ]]; then
            echo "${{ secrets.ENV_DEV }}" > .env
            echo "AWS_ECR_REPOSITORY=${{ secrets.AWS_ECR_REPOSITORY_PREFIX }}-dev" >> $GITHUB_ENV
          elif [[ ${{ steps.read-tag-info.outputs.tag }} == *"-prod" ]]; then
            echo "${{ secrets.ENV_PROD }}" > .env
            echo "AWS_ECR_REPOSITORY=${{ secrets.AWS_ECR_REPOSITORY_PREFIX }}-prod" >> $GITHUB_ENV
          else
            echo "Invalid tag format. Tag must end with -dev or -main"
            exit 1
          fi

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY }}
        run: |
          rm -rf .dockerignore
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.read-tag-info.outputs.tag }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.read-tag-info.outputs.tag }}

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-22.04
  #   permissions:
  #     id-token: write
  #     contents: read

  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: ${{ secrets.AWS_REGION }}
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-definition
  #       uses: aws-actions/amazon-ecs-render-task-definition@v4
  #       with:
  #         task-definition: ${{ secrets.AWS_ECS_TASK_DEFINITION }}
  #         container-name: ${{ secrets.AWS_ECS_CONTAINER_NAME }}
  #         image: ${{ needs.build.outputs.image }}

  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v4
  #       with:
  #         task-definition: ${{ steps.task-definition.outputs.task-definition }}
  #         service: ${{ secrets.AWS_ECS_SERVICE }}
  #         cluster: ${{ secrets.AWS_ECS_CLUSTER }}
  #         wait-for-service-stability: true
