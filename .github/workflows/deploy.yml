name: Deploy to AWS ECS

on:
  push:
    tags:
      - 'v*-dev'  # 개발 환경 태그 (예: v1.0.0-dev)
      - 'v*-prod' # 운영 환경 태그 (예: v1.0.0-prod)

env:
  AWS_REGION: ap-northeast-2
  ECS_SERVICE: link-force-api-service
  ECS_CLUSTER: link-force-cluster
  ECS_TASK_DEFINITION: link-force-api-task
  CONTAINER_NAME: link-force-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set environment variables based on tag
      id: set-env
      run: |
        if [[ ${{ github.ref_name }} == *"-dev" ]]; then
          echo "ECR_REPOSITORY=snipfy-api-dev" >> $GITHUB_ENV
        elif [[ ${{ github.ref_name }} == *"-prod" ]]; then
          echo "ECR_REPOSITORY=snipfy-api-prod" >> $GITHUB_ENV
        else
          echo "Invalid tag format. Tag must end with -dev or -prod"
          exit 1
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.ref_name }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.ref_name }}

        # Output the image URI for use in the next step
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.ref_name }}" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v4
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v4
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true 